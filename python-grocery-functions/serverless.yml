org: matpanett
app: python-sls-function
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: python-mpn-functions # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.9
  region: eu-central-1
  stage: ${self:custom.vars.stage, "dev"}
  logRetentionInDays: ${self:custom.vars.logRetentionInDays, 1}
  profile: serverless-mpn-admin
  versionFunctions: false

  memorySize: 2048
  timeout: 900

  environment:
    MONGO_URI: ${env:MONGO_URI}
    MONGO_DATABASE: ${env:MONGO_DATABASE}
    STAGE: ${self:provider.stage}
    SCRAPER_FEED_BUCKET: !Ref ScraperFeedBucket
    SCRAPER_FEED_HANDLED_TOPIC_ARN: !Ref ScraperFeedHandledTopic
    BOOK_FEED_HANDLED_TOPIC_ARN: !Ref BookFeedHandledTopic
    SENTRY_DSN: ${env:SENTRY_DSN}
    SENTRY_ENVIRONMENT: ${self:custom.vars.stage, "dev"}
    HANDLE_SCRAPER_FEED_FUNCTION_NAME: "${self:service}-${self:provider.stage}-scraperFeedWithConfigTrigger"
    HANDLE_SCRAPER_FEED_PRICING_FUNCTION_NAME: "${self:service}-${self:provider.stage}-scraperFeedWithConfigTriggerForPricing"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:mpn-crawler-${self:provider.stage}-scrape"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:GetObjectVersion"
      Resource: !Sub
        - "arn:aws:s3:::#{BucketName}/*"
        - BucketName:
            Ref: ScraperFeedBucket
    - Effect: "Allow"
      Action:
        - "s3:ListBucketVersions"
        - "s3:GetBucketVersioning"
      Resource: !Sub
        - "arn:aws:s3:::#{BucketName}"
        - BucketName:
            Ref: ScraperFeedBucket
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: !Ref ScraperFeedHandledTopic
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: !Ref BookFeedHandledTopic
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-scraperFeedWithConfigTrigger"
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-scraperFeedWithConfigTriggerForPricing"

package:
  include:
    - aws_config.py
    - offer_feed/**
    - scraper_feed/**
    - book_feed/**
    - scraper_management/**
    - storage/**
    - util/**
    - parsing/**
    - config/**
    - amp_types/**
    - transform/**
  exclude:
    - ./**

functions:
  scraperFeedSns:
    handler: scraper_feed.scraper_handler.scraper_feed_sns
    events:
      - sns:
          topicName: ScraperFeedCreated
          arn:
            Ref: ScraperFeedCreatedTopic
  scraperFeedTrigger:
    handler: scraper_feed.scraper_handler.trigger_scraper_feed
  scraperFeedWithConfigTrigger:
    handler: scraper_feed.scraper_handler.trigger_scraper_feed_with_config
  scraperFeedWithConfigTriggerForPricing:
    handler: scraper_feed.handle_feed_pricing.trigger_scraper_feed_with_config
  scraperFeedPricingHistory:
    handler: scraper_feed.handle_feed_pricing.trigger_scraper_feed_pricing_with_history
    timeout: 900
  offerFeedCategoriesSns:
    handler: offer_feed.categories.offer_feed_sns_for_categories
    events:
      - sns:
          topicName: ScraperFeedHandled
          arn:
            Ref: ScraperFeedHandledTopic
  offerFeedCategoriesTrigger:
    handler: offer_feed.categories.offer_feed_trigger_for_categories
  offerFeedMetaTrigger:
    handler: offer_feed.offer_handler.offer_feed_meta_trigger
  offerFeedMetaSns:
    handler: offer_feed.offer_handler.offer_feed_meta_sns
    events:
      - sns:
          topicName: ScraperFeedHandled
          arn:
            Ref: ScraperFeedHandledTopic
  handle_offer_relations_trigger:
    handler: offer_feed.offer_relations_handler.handle_offer_relations_trigger
  handle_offer_relations_sns:
    handler: offer_feed.offer_relations_handler.handle_offer_relations_sns
    events:
      - sns:
          topicName: ScraperFeedHandled
          arn:
            Ref: ScraperFeedHandledTopic
  handle_offers_market_trigger:
    handler: offer_feed.offer_market_handler.handle_market_offers_trigger
  handle_offers_market_sns:
    handler: offer_feed.offer_market_handler.handle_market_offers_sns
    events:
      - sns:
          topicName: ScraperFeedHandled
          arn:
            Ref: ScraperFeedHandledTopic
  offerFeedGtinsTrigger:
    handler: offer_feed.offer_handler.offer_feed_trigger_for_gtins
  offerFeedGtinsSns:
    handler: offer_feed.offer_handler.offer_feed_sns_for_gtins
    events:
      - sns:
          topicName: ScraperFeedHandled
          arn:
            Ref: ScraperFeedHandledTopic

  bookFeedTrigger:
    handler: book_feed.handler.handle_book_offers_trigger
  bookFeedSns:
    handler: book_feed.handler.handle_book_offers_sns
    events:
      - sns:
          topicName: BookFeedHandled
          arn:
            Ref: BookFeedHandledTopic
  processBooksTrigger:
    handler: book_feed.handler.process_books_trigger
    events:
      - schedule:
          rate: rate(1 day)
          enabled: true
          description: "Every day"

  handleHttpOptions:
    handler: scraper_management.handler.handle_options
    events:
      - http:
          path: "{proxy+}"
          method: options
  invokeScrapeHttp:
    environment:
      SCRAPE_FUNCTION_NAME: mpn-crawler-${self:provider.stage}-scrape
    handler: scraper_management.handler.handle_scrape
    events:
      - http:
          path: scrape/{id}
          method: post
  invokeHandleHttp:
    environment:
      SCRAPE_FUNCTION_NAME: mpn-crawler-${self:provider.stage}-handle
    handler: scraper_management.handler.handle_feed
    events:
      - http:
          path: handle/{id}
          method: post

  updatePageviews:
    handler: scraper_feed.google_anal.pageviews.handle_ga4
    events:
      - schedule:
          rate: rate(12 hours)
          enabled: true
          description: "Every twelve hours"

resources:
  - ${file(../s3-sns-cloudformation.yml)}

plugins:
  - serverless-python-requirements
  - serverless-cloudformation-sub-variables

custom:
  vars: ${file(./sls-config.js)}
  pythonRequirements:
    # dockerizePip: true # Had some problem with C libs in python if using no-linux
    # slim: true # Omits tests, __pycache__, *.pyc etc from dependencies
    # Caching pip
    #useDownloadCache: true
    #useStaticCache: true
    fileName: requirements.txt
    # slimPatternsAppendDefaults: false # Weird error with google-api-python-client https://russo.nyc/lambda-distribution-not-found-python/
